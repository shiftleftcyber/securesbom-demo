name: SecureSBOM Demo - Tamper Detection & Quality Gate (Maven)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  # --------------------------------------------------
  # 1Ô∏è‚É£ Build & Test
  # --------------------------------------------------
  build:
    name: üèóÔ∏è Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Build & Test with Maven
        run: mvn -B clean verify -DskipTests
        shell: bash

      - name: Upload Build Artifacts (for next stage)
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: target/

      - name: Add Job Summary
        run: |
          echo "### üèóÔ∏è Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "- Maven project built successfully" >> $GITHUB_STEP_SUMMARY
          echo "- Artifacts uploaded for SBOM generation" >> $GITHUB_STEP_SUMMARY


  # --------------------------------------------------
  # 2Ô∏è‚É£ Generate SBOM
  # --------------------------------------------------
  generate-sbom:
    name: üì¶ Generate SBOM
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: target/

      - name: Generate SBOM (CycloneDX)
        run: |
          mvn -B org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom \
            -DoutputFormat=JSON \
            -DschemaVersion=1.6 \
            -DoutputName=demo-app.1.0.0.cdx
          echo "Generated SBOM:"
        shell: bash

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: generated-sbom
          path: target/demo-app.1.0.0.cdx.json

      - name: Add Job Summary
        run: |
          echo "### üì¶ SBOM Generated" >> $GITHUB_STEP_SUMMARY
          echo "- CycloneDX SBOM created for build artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Uploaded as artifact [generated-sbom]" >> $GITHUB_STEP_SUMMARY


  # --------------------------------------------------
  # 3Ô∏è‚É£ Sign SBOM
  # --------------------------------------------------
  sign-sbom:
    name: üîè Sign SBOM
    runs-on: ubuntu-latest
    needs: generate-sbom

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Download Generated SBOM
        uses: actions/download-artifact@v4
        with:
          name: generated-sbom

      - name: Sign SBOM
        uses: shiftleftcyber/secure-sbom-action@v1.3.1
        with:
          sbom_file: demo-app.1.0.0.cdx.json
          secure_sbom_action: sign
          api_key: ${{ secrets.SECURE_SBOM_API_KEY }}
          key_id: ${{ secrets.SECURE_SBOM_KEYID }}

      - name: Upload Signed SBOM
        uses: actions/upload-artifact@v4
        with:
          name: signed-sbom
          path: demo-app.1.0.0.cdx.signed.json

      - name: Add Job Summary
        run: |
          echo "### üîè SBOM Signed" >> $GITHUB_STEP_SUMMARY
          echo "- SBOM signed using SecureSBOM API" >> $GITHUB_STEP_SUMMARY
          echo "- Signed artifact uploaded [signed-sbom]" >> $GITHUB_STEP_SUMMARY


  # --------------------------------------------------
  # 4Ô∏è‚É£ Tamper SBOM (Simulate Attacker)
  # --------------------------------------------------
  tamper-sbom:
    name: ‚ö†Ô∏è Tamper SBOM (Simulate Attacker)
    runs-on: ubuntu-latest
    needs: sign-sbom

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Download Signed SBOM
        uses: actions/download-artifact@v4
        with:
          name: signed-sbom

      - name: Tamper with SBOM (Modify line 158)
        run: |
          echo "Simulating malicious modification on line 158..."
          cp demo-app.1.0.0.cdx.signed.json tampered-demo-app.1.0.0.cdx.signed.json
  
          # Replace the version text explicitly on line 158 using Python
          python3 - <<'PYCODE'
          import fileinput
          import sys
  
          filename = "tampered-demo-app.1.0.0.cdx.signed.json"
          lines = open(filename).read().splitlines()
  
          if len(lines) >= 158:
            print("Before:", lines[157])
            lines[157] = lines[157].replace("2.14.1", "2.20.0")
            print("After: ", lines[157])
          else:
            print("‚ö†Ô∏è File shorter than 158 lines!")
  
          open(filename, "w").write("\n".join(lines))
          PYCODE
  
          echo "‚úÖ Tampering complete. Diff preview:"
          diff -u demo-app.1.0.0.cdx.signed.json tampered-demo-app.1.0.0.cdx.signed.json || true

      - name: Upload Tampered SBOM
        uses: actions/upload-artifact@v4
        with:
          name: tampered-sbom
          path: tampered-demo-app.1.0.0.cdx.signed.json

      - name: Add Job Summary
        run: |
          echo "### ‚ö†Ô∏è Tamper Simulation" >> $GITHUB_STEP_SUMMARY
          echo "- SBOM was modified after signing" >> $GITHUB_STEP_SUMMARY
          echo "- Log4J version changed to simulate tampering attempt" >> $GITHUB_STEP_SUMMARY
          echo "- Uploaded as artifact [tampered-sbom]" >> $GITHUB_STEP_SUMMARY


  # --------------------------------------------------
  # 5Ô∏è‚É£ Verify (Tampered) SBOM
  # --------------------------------------------------
  verify-sbom:
    name: ‚ùå Verify Tampered SBOM
    runs-on: ubuntu-latest
    needs: tamper-sbom

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Download Tampered SBOM
        uses: actions/download-artifact@v4
        with:
          name: tampered-sbom

      - name: Verify Tampered SBOM
        id: verify
        uses: shiftleftcyber/secure-sbom-action@v1.3.1
        with:
          sbom_file: tampered-demo-app.1.0.0.cdx.signed.json
          secure_sbom_action: verify
          api_key: ${{ secrets.SECURE_SBOM_API_KEY }}
          key_id: ${{ secrets.SECURE_SBOM_KEYID }}

      - name: Enforce Security Gate (Fail if invalid)
        if: steps.verify.outcome != 'success'
        run: |
          echo "‚ùå SBOM Verification Failed - Tampering Detected! Blocking Deployment."
          exit 1

      - name: Add Job Summary
        if: steps.verify.outcome != 'success'
        run: |
          echo "### ‚ùå SecureSBOM Verification Failed" >> $GITHUB_STEP_SUMMARY
          echo "- Tampered SBOM detected during verification" >> $GITHUB_STEP_SUMMARY
          echo "- üîí Security gate enforced: deployment blocked" >> $GITHUB_STEP_SUMMARY


  # --------------------------------------------------
  # 6Ô∏è‚É£ Simulated Deployment (Blocked)
  # --------------------------------------------------
  deploy:
    name: üö´ Deployment Blocked
    runs-on: ubuntu-latest
    needs: verify-sbom
    if: always()

    steps:
      - name: Conditional Deployment Simulation
        run: |
          if [ "${{ needs.verify-sbom.result }}" == "success" ]; then
            echo "üöÄ Deployment Approved - SBOM integrity verified!"
          else
            echo "‚õî Deployment Blocked - SBOM verification failed."
            exit 1
          fi

      - name: Add Job Summary
        run: |
          if [ "${{ needs.verify-sbom.result }}" == "success" ]; then
            echo "### üöÄ Deployment Simulated" >> $GITHUB_STEP_SUMMARY
            echo "- SBOM verification passed, deployment would proceed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚õî Deployment Blocked" >> $GITHUB_STEP_SUMMARY
            echo "- SBOM verification failed" >> $GITHUB_STEP_SUMMARY
            echo "- Build stopped by quality gate ‚ùå" >> $GITHUB_STEP_SUMMARY
